package io.axoniq.demo.gamerental;

import com.google.protobuf.ByteString;
import io.axoniq.axonserver.connector.AxonServerConnection;
import io.axoniq.axonserver.connector.event.transformation.EventTransformation;
import io.axoniq.axonserver.connector.event.transformation.event.EventSources;
import io.axoniq.axonserver.grpc.event.Event;
import io.axoniq.axonserver.grpc.event.EventWithToken;
import io.axoniq.dataprotection.api.FieldEncryptingSerializer;
import org.axonframework.axonserver.connector.AxonServerConnectionManager;
import org.axonframework.serialization.SerializedObject;
import org.axonframework.serialization.SimpleSerializedObject;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.concurrent.CompletableFuture;

import static org.axonframework.common.ObjectUtils.getOrDefault;

@RestController
@RequestMapping("/management/")
public class EventEncryptionTransformation {

    private static final String TRANSFER_EMAIL_ADDED_FQCN = "com.bluecharm.liverpool.api.events.ETransferEmailAdded";
    private static final String TRANSFORM_DESCRIPTION = "Encryption of sensitive data";

    private final AxonServerConnectionManager connectionManager;
    private final FieldEncryptingSerializer encryptingSerializer;

    /**
     * @param connectionManager    Automatically part of the Application Context through Axon Framework's Spring Boot
     *                             Starter.
     * @param encryptingSerializer Generated by us in the {@link EventEncryptionTransformationConfiguration}.
     */
    public EventEncryptionTransformation(AxonServerConnectionManager connectionManager,
                                         FieldEncryptingSerializer encryptingSerializer) {
        this.connectionManager = connectionManager;
        this.encryptingSerializer = encryptingSerializer;
    }

    @PostMapping("/encrypt-e-transfer-email-events")
    public CompletableFuture<EventTransformation> encryptEvents() {
        // AxonServerConnectionManager#getConnection() retrieves a connection the default context of this application.
        // If the transformation is intended for another context, use AxonServerConnectionManager#getConnection(String) instead,
        // wherein the String refers to the context name.
        AxonServerConnection connection = connectionManager.getConnection();

        // Using the values as shared in the code snippet in the Slack channel
        int firstEventIndex = 136492;
        int lastEventIndex = 284478;

        return EventSources.range(connection::eventChannel, firstEventIndex, lastEventIndex)
                           .filter(EventEncryptionTransformation::filterForTransferEmailAdded)
                           .transform(
                                   TRANSFORM_DESCRIPTION,
                                   (eventWithToken, appender) -> appender.replaceEvent(
                                           eventWithToken.getToken(),
                                           postEncryptEvent(eventWithToken.getEvent())
                                   )
                           )
                           .execute(connection::eventTransformationChannel);
    }

    private static boolean filterForTransferEmailAdded(EventWithToken event) {
        return event.getEvent()
                    .getPayload()
                    .getType()
                    .equals(TRANSFER_EMAIL_ADDED_FQCN);
    }

private Event postEncryptEvent(Event eventToEncrypt) {
    String revision = eventToEncrypt.getPayload().getRevision();
    SerializedObject<byte[]> serializedEvent = new SimpleSerializedObject<>(
            eventToEncrypt.getPayload().getData().toByteArray(),
            byte[].class,
            eventToEncrypt.getPayload().getType(),
            revision.isEmpty() ? null : revision
    );
    Object unencryptedEvent = encryptingSerializer.deserialize(serializedEvent);
    // Simply serializing it right away should be sufficient IF the deserialized event contains the PII annotations.
    SerializedObject<byte[]> encryptedAndSerializedEvent =
            encryptingSerializer.serialize(unencryptedEvent, byte[].class);

    return Event.newBuilder(eventToEncrypt)
                .setPayload(buildAxonServerSerializedObject(encryptedAndSerializedEvent))
                .build();
}

private static io.axoniq.axonserver.grpc.SerializedObject.Builder buildAxonServerSerializedObject(
        SerializedObject<byte[]> serializedEvent
) {
    return io.axoniq.axonserver.grpc.SerializedObject.newBuilder()
                                                     .setType(serializedEvent.getType().getName())
                                                     .setRevision(getOrDefault(
                                                             serializedEvent.getType().getRevision(), ""
                                                     ))
                                                     .setData(ByteString.copyFrom(serializedEvent.getData()));
}
}
